class Solution { 
public: 
    void dfs(int node,int p,int s,int res,int &ans,vector<vector<pair<int,int>>>&ps){ 
        if(res%s==0){ 
            ans++; 
        } 
        for(pair<int,int> a:ps[node]){ 
            if(a.first==p){ 
                continue; 
            } 
            dfs(a.first,node,s,a.second+res,ans,ps); 
        } 
    } 
    int fn(int node,int s,vector<vector<pair<int,int>>>&ps){ 
        vector<int>v; 
        int saxena=0; 
        for(pair<int,int> a:ps[node]){ 
            int ans=0; 
            dfs(a.first,node,s,a.second,ans,ps); 
            v.push_back(ans); 
            saxena+=ans; 
        } 
        int ans=0; 
        for(int a:v){ 
            saxena-=a; 
            ans+=a*saxena; 
        } 
        return ans; 
    } 
    vector<int> countPairsOfConnectableServers(vector<vector<int>>& edges, int s) { 
        int n=edges.size()+1; 

        vector<vector<pair<int,int>>>ps(n+1); 
        for(auto a:edges){ 
            ps[a[0]].push_back({a[1],a[2]}); 
            ps[a[1]].push_back({a[0],a[2]}); 
        } 
        vector<int>ans(n,0); 
        for(int i=0;i<n;i++){ 
            ans[i]+=fn(i,s,ps); 
            cout<<ans[i]<<endl; 
        } 
        return ans; 
    } 
}; 