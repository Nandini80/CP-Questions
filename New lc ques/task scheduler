class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        int size = tasks.size();

        unordered_map<char,int>mp;

        for (auto it : tasks){
            mp[it]++;
        }        

        priority_queue<int> maxp;
        for ( auto it : mp){
            maxp.push(it.second);
        }
        queue<pair<int,int>> q;

        int time = 0;

        while ( ! maxp.empty()  || !q.empty()){
            time++;

            if ( maxp.size() > 0){
                int curr = maxp.top();
                maxp.pop();

                int cnt = curr - 1;
                if ( cnt > 0){
                    q.push({cnt, time+n});
                }
            }
             if(!q.empty() && q.front().second == time) {
                maxp.push(q.front().first);
                q.pop();
            }
        }

        return time;
    }
};