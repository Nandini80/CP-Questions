class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        unordered_map<long long, int> piyush;
        long long sum = 0;
        long long maxSum = 0;

        for (int i = 0; i < n; i++) {
            sum += nums[i];

            if (piyush.find(sum - k) != piyush.end()) {
                maxSum = max(maxSum, sum - (sum - k));
            }

            if (piyush.find(sum + k) != piyush.end()) {
                maxSum = max(maxSum, sum - (sum + k));
            }

            if (abs(nums[i] - k) == k || abs(nums[i] + k) == k) {
                maxSum = max(maxSum, (long long)nums[i]);
            }

            piyush[sum]++;
        }

        return maxSum;
    }
};
