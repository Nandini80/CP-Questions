#include <iostream>
#include <string>
using namespace std;

// Base class: Employee
class Employee {
protected:
    string name;
    int number;

public:
    // Default constructor
    Employee() : name("Unknown"), number(0) {
        cout << "Employee default constructor called." << endl;
    }

    // Parameterized constructor
    Employee(string empName, int empNumber) : name(empName), number(empNumber) {
        cout << "Employee parameterized constructor called." << endl;
    }

    // Get data method
    virtual void getdata() {
        cout << "Enter employee name: ";
        cin >> name;
        cout << "Enter employee number: ";
        cin >> number;
    }

    // Put data method
    virtual void putdata() const {
        cout << "Employee Name: " << name << endl;
        cout << "Employee Number: " << number << endl;
    }

    // Destructor
    virtual ~Employee() {
        cout << "Employee destructor called." << endl;
    }
};

// Derived class: Manager
class Manager : public Employee {
private:
    string title;
    double club_dues;

public:
    // Default constructor
    Manager() : Employee(), title("None"), club_dues(0.0) {
        cout << "Manager default constructor called." << endl;
    }

    // Parameterized constructor
    Manager(string mgrName, int mgrNumber, string mgrTitle, double mgrClubDues)
        : Employee(mgrName, mgrNumber), title(mgrTitle), club_dues(mgrClubDues) {
        cout << "Manager parameterized constructor called." << endl;
    }

    // Get data method
    void getdata() override {
        Employee::getdata();
        cout << "Enter manager title: ";
        cin >> title;
        cout << "Enter club dues: ";
        cin >> club_dues;
    }

    // Put data method
    void putdata() const override {
        Employee::putdata();
        cout << "Manager Title: " << title << endl;
        cout << "Club Dues: " << club_dues << endl;
    }

    // Destructor
    ~Manager() override {
        cout << "Manager destructor called." << endl;
    }
};

// Derived class: Scientist
class Scientist : public Employee {
private:
    int publications;

public:
    // Default constructor
    Scientist() : Employee(), publications(0) {
        cout << "Scientist default constructor called." << endl;
    }

    // Parameterized constructor
    Scientist(string sciName, int sciNumber, int sciPublications)
        : Employee(sciName, sciNumber), publications(sciPublications) {
        cout << "Scientist parameterized constructor called." << endl;
    }

    // Get data method
    void getdata() override {
        Employee::getdata();
        cout << "Enter number of publications: ";
        cin >> publications;
    }

    // Put data method
    void putdata() const override {
        Employee::putdata();
        cout << "Number of Publications: " << publications << endl;
    }

    // Destructor
    ~Scientist() override {
        cout << "Scientist destructor called." << endl;
    }
};

// Derived class: Laborer
class Laborer : public Employee {
public:
    // Default constructor
    Laborer() : Employee() {
        cout << "Laborer default constructor called." << endl;
    }

    // Parameterized constructor
    Laborer(string labName, int labNumber) : Employee(labName, labNumber) {
        cout << "Laborer parameterized constructor called." << endl;
    }

    // Get data method
    void getdata() override {
        Employee::getdata();
    }

    // Put data method
    void putdata() const override {
        Employee::putdata();
    }

    // Destructor
    ~Laborer() override {
        cout << "Laborer destructor called." << endl;
    }
};

// Main program to create objects and demonstrate constructors
int main() {
    // Creating objects using default constructors
    Manager mgr1;
    Scientist sci1;
    Laborer lab1;

    // Creating objects using parameterized constructors
    Manager mgr2("Alice", 101, "Senior Manager", 1500.5);
    Scientist sci2("Bob", 102, 15);
    Laborer lab2("Charlie", 103);

    // Displaying data using putdata()
    cout << "\nDisplaying data for default constructor objects:" << endl;
    mgr1.putdata();
    sci1.putdata();
    lab1.putdata();

    cout << "\nDisplaying data for parameterized constructor objects:" << endl;
    mgr2.putdata();
    sci2.putdata();
    lab2.putdata();

    return 0;
}
































#include <iostream>
using namespace std;

class Date {
private:
    int day, month, year;
    static int dateCount;  // Static member to keep track of how many Date objects are created

public:
    // Default constructor
    Date() : day(0), month(0), year(0) {
        dateCount++;
    }

    // Parameterized constructor to initialize date
    Date(int d, int m, int y) : day(d), month(m), year(y) {
        dateCount++;
    }

    // Setter functions to change day, month, and year
    void setDay(int d) { day = d; }
    void setMonth(int m) { month = m; }
    void setYear(int y) { year = y; }

    // Getter functions to retrieve day, month, and year
    int getDay() const { return day; }
    int getMonth() const { return month; }
    int getYear() const { return year; }

    // Function to display date in "dd/mm/yyyy" format
    void display() const {
        cout << (day < 10 ? "0" : "") << day << "/"
             << (month < 10 ? "0" : "") << month << "/"
             << year << endl;
    }

    // Static function to get the number of dates created
    static int getDateCount() {
        return dateCount;
    }

    // Operator overloads for comparing two Date objects
    bool operator<(const Date& other) const {
        if (year < other.year) return true;
        if (year == other.year && month < other.month) return true;
        if (year == other.year && month == other.month && day < other.day) return true;
        return false;
    }

    bool operator>(const Date& other) const {
        return other < *this;
    }

    bool operator==(const Date& other) const {
        return day == other.day && month == other.month && year == other.year;
    }

    bool operator!=(const Date& other) const {
        return !(*this == other);
    }

    // Pre-increment operator overload (increments day by 1)
    Date& operator++() {
        ++day;
        return *this;
    }

    // Post-increment operator overload (increments day by 1)
    Date operator++(int) {
        Date temp = *this;
        ++day;
        return temp;
    }

    // Pre-decrement operator overload (decrements day by 1)
    Date& operator--() {
        --day;
        return *this;
    }

    // Post-decrement operator overload (decrements day by 1)
    Date operator--(int) {
        Date temp = *this;
        --day;
        return temp;
    }
};

// Initialize static member
int Date::dateCount = 0;

int main() {
    Date date1;                  // Default date (0/0/0)
    Date date2(15, 10, 2023);    // Date with values (15/10/2023)

    date1.display();             // Display default date
    date2.display();             // Display initialized date

    date1.setDay(12);            // Set day
    date1.setMonth(9);           // Set month
    date1.setYear(2022);         // Set year
    date1.display();             // Display updated date

    cout << "Number of dates created: " << Date::getDateCount() << endl;

    // Comparing dates
    if (date1 < date2) cout << "date1 is less than date2" << endl;
    if (date2 > date1) cout << "date2 is greater than date1" << endl;
    if (date1 != date2) cout << "date1 is not equal to date2" << endl;

    ++date1;                     // Increment day by 1 (pre-increment)
    date1.display();

    date2--;                     // Decrement day by 1 (pre-decrement)
    date2.display();

    return 0;
}



















import java.util.Scanner;

class RowSumCalculator extends Thread {
    private final int[] row;
    private final int rowIndex;
    private int sum;

    // Constructor to initialize the row and rowIndex
    public RowSumCalculator(int[] row, int rowIndex) {
        this.row = row;
        this.rowIndex = rowIndex;
    }

    // Method to calculate the sum of the row
    @Override
    public void run() {
        sum = 0;
        for (int value : row) {
            sum += value;
        }
        System.out.println("Sum of row " + rowIndex + ": " + sum);
    }
}

public class MatrixRowSum {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Reading matrix dimensions
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        System.out.print("Enter the number of columns: ");
        int cols = scanner.nextInt();

        int[][] matrix = new int[rows][cols];

        // Input matrix elements
        System.out.println("Enter the elements of the matrix:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }

        // Create an array to hold thread references
        RowSumCalculator[] threads = new RowSumCalculator[rows];

        // Initialize and start each thread
        for (int i = 0; i < rows; i++) {
            threads[i] = new RowSumCalculator(matrix[i], i);
            threads[i].start();
        }

        // Wait for all threads to complete
        for (RowSumCalculator thread : threads) {
            try {
                thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        System.out.println("Summation of all rows completed.");
    }
}







import java.util.Stack;

// Shared Stack class with synchronized methods
class SharedStack {
    private final Stack<Integer> stack = new Stack<>();
    private final int MAX_SIZE = 10;

    // Method to push an item into the stack
    public synchronized void push(int item) {
        while (stack.size() == MAX_SIZE) {
            try {
                wait(); // Wait if the stack is full
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        stack.push(item);
        System.out.println("Pushed: " + item);
        notifyAll(); // Notify any waiting threads
    }

    // Method to pop an item from the stack
    public synchronized int pop() {
        while (stack.isEmpty()) {
            try {
                wait(); // Wait if the stack is empty
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        int item = stack.pop();
        System.out.println("Popped: " + item);
        notifyAll(); // Notify any waiting threads
        return item;
    }
}

// Producer class implementing Runnable
class Producer implements Runnable {
    private final SharedStack stack;

    public Producer(SharedStack stack) {
        this.stack = stack;
    }

    @Override
    public void run() {
        for (int i = 1; i <= 7; i++) {
            stack.push(i);
            try {
                Thread.sleep(500); // Sleep for 500 ms
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

// Consumer class implementing Runnable
class Consumer implements Runnable {
    private final SharedStack stack;

    public Consumer(SharedStack stack) {
        this.stack = stack;
    }

    @Override
    public void run() {
        for (int i = 0; i < 14; i++) { // Total 14 items to pop
            stack.pop();
            try {
                Thread.sleep(600); // Sleep for 600 ms
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

// Main class to run the Producer-Consumer problem
public class ProducerConsumerExample {
    public static void main(String[] args) {
        SharedStack sharedStack = new SharedStack();

        // Create producer and consumer threads
        Thread producer1 = new Thread(new Producer(sharedStack));
        Thread producer2 = new Thread(new Producer(sharedStack));
        Thread consumer = new Thread(new Consumer(sharedStack));

        // Start the threads
        producer1.start();
        producer2.start();
        consumer.start();

        // Wait for all threads to finish
        try {
            producer1.join();
            producer2.join();
            consumer.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("All items have been processed successfully.");
    }
}












import java.util.Scanner;

class RowSumThread extends Thread {
    private int[] row;
    private int rowIndex;
    private int sum;

    public RowSumThread(int[] row, int rowIndex) {
        this.row = row;
        this.rowIndex = rowIndex;
    }

    @Override
    public void run() {
        sum = 0;
        for (int num : row) {
            sum += num;
        }
        System.out.println("Sum of row " + rowIndex + " is: " + sum);
    }
}

public class MatrixRowSum {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter number of rows (m): ");
        int m = scanner.nextInt();
        System.out.print("Enter number of columns (n): ");
        int n = scanner.nextInt();

        int[][] matrix = new int[m][n];
        System.out.println("Enter the elements of the matrix:");
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }

        Thread[] threads = new Thread[m];
        for (int i = 0; i < m; i++) {
            threads[i] = new RowSumThread(matrix[i], i);
            threads[i].start();
        }

        // Wait for all threads to complete
        for (int i = 0; i < m; i++) {
            try {
                threads[i].join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        scanner.close();
    }
}








import java.util.Stack;

class SharedStack {
    private final Stack<Integer> stack = new Stack<>();
    private final int MAX_SIZE = 10;

    public synchronized void push(int item) throws InterruptedException {
        while (stack.size() == MAX_SIZE) {
            wait();
        }
        stack.push(item);
        System.out.println("Pushed: " + item);
        notifyAll();
    }

    public synchronized int pop() throws InterruptedException {
        while (stack.isEmpty()) {
            wait();
        }
        int item = stack.pop();
        System.out.println("Popped: " + item);
        notifyAll();
        return item;
    }
}

class Producer extends Thread {
    private final SharedStack stack;
    private final int producerId;

    public Producer(SharedStack stack, int producerId) {
        this.stack = stack;
        this.producerId = producerId;
    }

    @Override
    public void run() {
        try {
            for (int i = 1; i <= 7; i++) {
                stack.push(i + (producerId * 10)); // Unique values from each producer
                Thread.sleep(500);
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

class Consumer extends Thread {
    private final SharedStack stack;

    public Consumer(SharedStack stack) {
        this.stack = stack;
    }

    @Override
    public void run() {
        try {
            for (int i = 0; i < 14; i++) {
                stack.pop();
                Thread.sleep(600);
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

public class ProducerConsumerStack {
    public static void main(String[] args) {
        SharedStack stack = new SharedStack();

        Producer producer1 = new Producer(stack, 1);
        Producer producer2 = new Producer(stack, 2);
        Consumer consumer = new Consumer(stack);

        producer1.start();
        producer2.start();
        consumer.start();

        try {
            producer1.join();
            producer2.join();
            consumer.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}











#include <iostream>
using namespace std;

// Define a Node class
class Node {
public:
    int data;
    Node* next;

    // Constructor to initialize the node
    Node(int val) {
        data = val;
        next = nullptr;
    }
};

// Define a LinkedList class
class LinkedList {
private:
    Node* head;

public:
    // Constructor to initialize the linked list
    LinkedList() {
        head = nullptr;
    }

    // Function to insert a new node at the end
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);

        if (head == nullptr) { // If the list is empty
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) { // Traverse to the last node
                temp = temp->next;
            }
            temp->next = newNode;
        }
        cout << "Inserted " << value << " at the end of the list." << endl;
    }

    // Function to delete a node from the beginning
    void deleteFromBeginning() {
        if (head == nullptr) { // If the list is empty
            cout << "The list is empty. Nothing to delete." << endl;
            return;
        }

        Node* temp = head;
        head = head->next;
        cout << "Deleted " << temp->data << " from the beginning of the list." << endl;
        delete temp;
    }

    // Function to display the list
    void display() {
        if (head == nullptr) {
            cout << "The list is empty." << endl;
            return;
        }

        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL" << endl;
    }

    // Destructor to clean up memory
    ~LinkedList() {
        while (head != nullptr) {
            deleteFromBeginning();
        }
    }
};

// Main function
int main() {
    LinkedList list;
    int choice, value;

    while (true) {
        cout << "\nMenu:\n";
        cout << "1. Insert at End\n";
        cout << "2. Delete from Beginning\n";
        cout << "3. Display List\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value to insert: ";
            cin >> value;
            list.insertAtEnd(value);
            break;
        case 2:
            list.deleteFromBeginning();
            break;
        case 3:
            list.display();
            break;
        case 4:
            cout << "Exiting program." << endl;
            return 0;
        default:
            cout << "Invalid choice. Please try again." << endl;
        }
    }
}



