class Solution {
public:
    
    int r[4] = {-1 , 0, 1, 0};
    int c[4] = {0 ,1 , 0 , -1};

    void dfs(int row, int col, vector<pair<int,int>> &v, vector<vector<int>> &visited, vector<vector<int>>& grid)
{
    int n = visited[0].size();
    visited[row][col] = 1;
    v.push_back({row,col});

    for ( int i = 0; i < 4; i++){
        int nrow = row +r[i];
        int ncol = col + c[i];

        if ( nrow >= 0 && ncol >= 0 && nrow < n && ncol < n && visited[nrow][ncol] == 0 && grid[nrow][ncol] == 1){
            dfs ( nrow, ncol , v, visited, grid);
        }
    }
}
    int shortestBridge(vector<vector<int>>& grid) {
        vector<pair<int,int >> v;
        vector<pair<int,int>>v1;
        vector<pair<int,int>>v2;

        int n = grid.size();

        vector<vector<int>> visited(n, vector<int>(n,0));

        bool flag = 0;
        for ( int i = 0; i < n; i++){
            for ( int j = 0; j < n; j++){
                if ( grid[i][j] == 1 && visited[i][j] == 0){
                    dfs( i, j, v, visited, grid);
                    if ( flag == 0){
                        v1 = v;
                        flag = 1;
                        v.clear();
                    }
                    else {
                        v2 = v;
                    }
                }
            }
        }
           int ans = 1e9;


        for(auto it: v1)
        {
            int row1 = it.first;
            int col1 = it.second;

            for(auto itt: v2)
            {
                int row2 = itt.first;
                int col2 = itt.second;

                int dist = abs(row1 - row2) + abs(col1 - col2);
                dist--;
                ans = min(ans , dist);
            }
        }
    
        return ans;
    }
};