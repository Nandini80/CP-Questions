class Solution {
public:
    long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {
        long long res[26][26];
        for (int i = 0; i < 26; i++) {
            fill(res[i], res[i] + 26, LLONG_MAX);
            res[i][i] = 0; 
        }
        
        for (int i = 0; i < original.size(); i++) {
            int val1 = original[i] - 'a';
            int val2 = changed[i] - 'a';
            res[val1][val2] = min(res[val1][val2], (long long)cost[i]); 
        }
        
        for (int k = 0; k < 26; k++) {
            for (int i = 0; i < 26; i++) {
                for (int j = 0; j < 26; j++) {
                    if (res[i][k] != LLONG_MAX && res[k][j] != LLONG_MAX) {
                        res[i][j] = min(res[i][j], res[i][k] + res[k][j]);
                    }
                }
            }
        }
        
        long long ans = 0; 
        for (int i = 0; i < source.size(); i++) {
            int val1 = source[i] - 'a';
            int val2 = target[i] - 'a';

            if (val1 == val2) {
                continue; 
            }

            if (res[val1][val2] == LLONG_MAX) {
                return -1; 
            } else {
                if (ans > LLONG_MAX - res[val1][val2]) {
                    return -1; 
                }
                ans += res[val1][val2]; 
            }
        }
        return ans;
    }
};