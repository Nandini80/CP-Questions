class Solution {
public:
    int numMagicSquaresInside(vector<vector<int>>& grid) {
        int count = 0;
        int rows = grid.size();
        int cols = grid[0].size();
        
        for (int i = 0; i <= rows - 3; i++) {
            for (int j = 0; j <= cols - 3; j++) {
                if (isMagicSquare(grid, i, j)) {
                    count++;
                }
            }
        }
        
        return count;
    }

private:
    bool isMagicSquare(vector<vector<int>>& grid, int row, int col) {
        vector<int> nums(10, 0);  
        int sum = grid[row][col] + grid[row][col + 1] + grid[row][col + 2];
        
        for (int i = 0; i < 3; i++) {
            int rowSum = 0;
            for (int j = 0; j < 3; j++) {
                int num = grid[row + i][col + j];
                if (num < 1 || num > 9 || nums[num]++ > 0) return false; 
                rowSum += num;
            }
            if (rowSum != sum) return false;
        }
        
        for (int j = 0; j < 3; j++) {
            int colSum = 0;
            for (int i = 0; i < 3; i++) {
                colSum += grid[row + i][col + j];
            }
            if (colSum != sum) return false;
        }
        
        if (grid[row][col] + grid[row + 1][col + 1] + grid[row + 2][col + 2] != sum) return false;
        if (grid[row][col + 2] + grid[row + 1][col + 1] + grid[row + 2][col] != sum) return false;
        
        return true;
    }
};
