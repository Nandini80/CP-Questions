class Solution {
public:
    bool findSafeWalk(vector<vector<int>>& grid, int health) {
        int n = grid.size();
        int m = grid[0].size();

        if(health- grid[0][0] < 1 ) return false;
        vector<vector<int>> vis(n, vector<int>(m, 0));
        priority_queue<pair<int, pair<int, int>>>q;

        vector<int> dirX = {0, 1, -1};
        vector<int> dirY = {0, 1, -1};
        health-= grid[0][0];
        q.push({health, {0, 0}});
        vis[0][0] = 1;

        while(!q.empty()){
            
            int h = q.top().first; 
            int x =  q.top().second.first;
            int y = q.top().second.second;
            q.pop();
            if (x == n - 1 && y == m - 1) {
                return true;
            }
            for(int i = 0; i < 3; i++){
                for(int j = 0; j < 3; j++){

                    if( abs(dirX[i]) == abs(dirY[j])) continue;
                    int X = x + dirX[i];
                    int Y = y + dirY[j];
                    if(X < 0 || X>= n || Y < 0 || Y >=m || h - grid[X][Y] < 1) continue;

                    if(vis[X][Y] ==0) {
                        vis[X][Y] = 1;
                        q.push({h-grid[X][Y], {X, Y}});
                    }
                }
            }
        }
        return vis[n-1][m-1];

    }
};