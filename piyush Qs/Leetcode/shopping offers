class Solution {
public:
    unordered_map<string, int> memo;
    
    int solve(vector<int>& price, vector<vector<int>>& special, vector<int>& needs, int idx, int n) {
        if (idx == special.size()) {
            int cost = 0;
            for (int i = 0; i < n; i++) {
                cost += (needs[i] * price[i]);
            }
            return cost;
        }

        string key = to_string(idx) + "-";
        for (int need : needs) {
            key += to_string(need) + "-";
        }

        if (memo.find(key) != memo.end()) {
            return memo[key];
        }

        bool canApply = true;
        for (int i = 0; i < n; i++) {
            if (special[idx][i] > needs[i]) {
                canApply = false;
                break;
            }
        }

        int minCost = solve(price, special, needs, idx + 1, n);

        if (canApply) {
            for (int i = 0; i < n; i++) {
                needs[i] -= special[idx][i];
            }

            int consider = special[idx][n] + solve(price, special, needs, idx, n);

            for (int i = 0; i < n; i++) {
                needs[i] += special[idx][i];
            }

            minCost = min(minCost, consider);
        }

        memo[key] = minCost;
        return minCost;
    }

    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        int n = price.size();
        return solve(price, special, needs, 0, n);
    }
};