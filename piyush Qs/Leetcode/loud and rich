class Solution {
public:
    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {
        int n = quiet.size();

        vector<vector<int>>graph(n);
        vector<int>ans(n);
        vector<int>res(n,0);
        int m = richer.size();

        for ( int i = 0; i < n; i++){
            ans[i] = i;
        }

        for ( int i = 0; i < m; i++){
            int u = richer[i][0];
            int v = richer[i][1];

            graph[u].push_back(v);
            res[v]++;
        }

        queue<int>q;

        for ( int i = 0; i < n; i++){
            if ( res[i] == 0){
                q.push(i);
            }
        }

        while(!q.empty()){
            int top = q.front();
            q.pop();

            for ( auto it : graph[top]){
                res[it]--;

                if ( res[it] == 0)
                q.push(it);

                if ( quiet[ans[it]] > quiet[ans[top]]){
                    ans[it] = ans[top];
                }
            }
        }
        return ans;
    }
};