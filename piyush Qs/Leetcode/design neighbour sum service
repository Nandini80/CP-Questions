class neighborSum {
private:
    vector<vector<int>> grid;
    unordered_map<int, int> adjacentSums;
    unordered_map<int, int> diagonalSums;
    int n;

public:
    neighborSum(vector<vector<int>>& grid) : grid(grid) {
        n = grid.size();
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                int value = grid[i][j];
                adjacentSums[value] = res(i, j);
                diagonalSums[value] = ans(i, j);
            }
        }
    }

    int adjacentSum(int value) {
        return adjacentSums.count(value) ? adjacentSums[value] : 0;
    }
    
    int diagonalSum(int value) {
        return diagonalSums.count(value) ? diagonalSums[value] : 0;
    }

private:
    int res(int x, int y) {
        int cnt = 0;
        if (y + 1 < n) cnt += grid[x][y + 1];
        if (y - 1 >= 0) cnt += grid[x][y - 1];
        if (x + 1 < n) cnt += grid[x + 1][y];
        if (x - 1 >= 0) cnt += grid[x - 1][y];
        
        return cnt;
    }

    int ans(int x, int y) {
        int cnt = 0;
        if (x + 1 < n && y + 1 < n) cnt += grid[x + 1][y + 1];
        if (x + 1 < n && y - 1 >= 0) cnt += grid[x + 1][y - 1];
        
        if (x - 1 >= 0 && y + 1 < n) cnt += grid[x - 1][y + 1];
        if (x - 1 >= 0 && y - 1 >= 0) cnt += grid[x - 1][y - 1];
        
        return cnt;
    }
};
