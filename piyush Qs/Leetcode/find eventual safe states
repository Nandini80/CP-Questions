class Solution {
public:
    void dfs(int node,vector<vector<int>>& graph,vector<int>& vis,vector<int>& is_safe,int p)
    {
        vis[node]=1;
        bool ans=1;
        for(auto x: graph[node])
        {
            // if(x==p)
            // continue;
            if(!vis[x])
            {
                dfs(x,graph,vis,is_safe,node);
                ans&=is_safe[x];
            }
            else
            {
                ans&=is_safe[x];
            }
        }
        is_safe[node]=ans;
    }
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        vector<int> ans;
        int n=graph.size();
      
        vector<int> out(n,0);
        vector<int> adjt[n];
        vector<int> vis(n,0);
        vector<int> is_safe(n,0);
        for(int i=0;i<n;i++)
        {
            for(auto x: graph[i])
            {
                out[i]++;
                adjt[x].push_back(i);
            }
        }
        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            {
                dfs(i,graph,vis,is_safe,-1);
            }
        }
        for(int i=0;i<n;i++)
        {
            if(is_safe[i])
            {
                ans.push_back(i);
            }
        }
        return ans;
       
    }
};