
class Solution {
public:
    bool isPossible(vector<int>& left, int right, long long minDiff) {
        long long cnt = left[0];
        for (int i = 1; i < left.size(); ++i) {
            if (cnt + minDiff > left[i] + right) {
                return false;
            }
            cnt = max(cnt + minDiff, static_cast<long long>(left[i]));
        }
        return true;
    }
    
    int maxPossibleScore(vector<int>& left, int right) {
        sort(left.begin(), left.end());
        
        long long low = 0, high = static_cast<long long>(right) + left.back() - left.front();
        long long res = 0;
        
        while (low <= high) {
            long long ans = low + (high - low) / 2;
            if (isPossible(left, right, ans)) {
                res = ans;
                low = ans + 1;
            } else {
                high = ans - 1;
            }
        }
        
        return res;
    }
};