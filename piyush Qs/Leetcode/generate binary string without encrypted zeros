class Solution {
public:
    vector<string> validStrings(int n) {
        vector<string> result;
        if (n == 0) return result;

        queue<string> q;
        q.push("0");
        q.push("1");

        while (!q.empty()) {
            string current = q.front();
            q.pop();

            if (current.size() == n) {
                if (isValid(current)) {
                    result.push_back(current);
                }
            } else {
                q.push(current + "0");
                q.push(current + "1");
            }
        }

        return result;
    }

private:
    bool isValid(const string& s) {
        for (int i = 0; i < s.size() - 1; ++i) {
            if (s.substr(i, 2) == "00") {
                return false;
            }
        }
        return true;
    }
};