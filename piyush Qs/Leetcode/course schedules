class Solution {
public:

bool dfs(int i, unordered_map<int,bool>&visited, unordered_map<int,bool>&dfsvisited,  unordered_map<int,list<int>>&adj)
{
    visited[i]=true;
    dfsvisited[i]=true;

    for(auto j:adj[i])
    {
        if(!visited[j])
        {
            bool detect=dfs(j, visited, dfsvisited, adj);
            if(detect==true)
              {
                  return true;
              }
        }
        else if(dfsvisited[j]==true)
            {
                return true;
            } 
    }
    dfsvisited[i]=false;
    return false;
}


bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
  unordered_map<int,list<int>>adj;
  for(int i=0;i<prerequisites.size();i++)
  {
        int a=prerequisites[i][0];
        int b=prerequisites[i][1];
        
        adj[a].push_back(b);
  }

  unordered_map<int,bool>visited;
  unordered_map<int,bool>dfsvisited;
  for(int i=0;i<numCourses;i++)
  {
      if(!visited[i])
      {
          bool ans=dfs(i,visited,dfsvisited,adj);
            if(ans)
            {
              return false;
            }
      }
  }
  return true;
    }
};