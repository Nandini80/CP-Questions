/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

int final(vector<int>& arr){

    int n = arr.size(), cnt = 0;

    vector<pair<int,int>>vs;

    for ( int i = 0; i < n; i++){
        vs.push_back({arr[i], i});
    }

    sort(vs.begin(), vs.end());

    for ( int i = 0; i < n; i++){

        if ( vs[i].first != arr[i]){
            swap(vs[vs[i].second], vs[i]);
            i--;
            cnt++;
        }

    }

    return cnt;
}
    int minimumOperations(TreeNode* root) {
   
    queue<TreeNode*> q;

    q.push(root);

    int res = 0;

    while ( !q.empty()){

        int s = q.size();

        vector<int>vc;

        for ( int i = 0; i < s;i++){
            TreeNode* curr = q.front();

            q.pop();

            vc.push_back(curr->val);

            if ( curr->left){
                q.push(curr->left);
            }

            if ( curr -> right){
                q.push(curr->right);
            }
        }

        res+=final(vc);
    }

    return res;

        
    }
};