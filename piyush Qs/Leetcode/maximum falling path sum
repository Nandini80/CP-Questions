class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        vector<vector<int>> dp(n, vector<int>(n, 1e8));
        for(int i=0;i<n; i++){
            dp[0][i] = matrix[0][i];
        }
        for(int i=1; i<n; i++){
            for(int j=0; j<n; j++){
                int leftdown = 1e8, rightdown = 1e8, down = 1e8;
                if(i>0){
                    down = matrix[i][j] + dp[i-1][j];
                }
                if(i>0 && j>0){
                    rightdown = matrix[i][j] + dp[i-1][j-1];
                }
                if(i>0 && j<n-1){
                    leftdown = matrix[i][j] + dp[i-1][j+1];
                }
                dp[i][j] =  min(down, min(rightdown, leftdown));
            }
        }
        int ans = 1e8;
        for(int i=0; i<n; i++){
            ans = min(ans, dp[n-1][i]);
        }
        return ans;
    }
};