class Solution {
public:
    int maxFrequency(vector<int>& nums, int k, int o) {
        int n = nums.size();
        int res = 0, l = 0, r = 0;

        sort ( nums.begin(), nums.end());
        unordered_map<int,int>mp;

        for ( auto it: nums){
            mp[it]++;
        }

        for ( int i = 0; i < n; i++){
            while ( nums[i] - nums[l] > k){
                l++;

            }

            while ( r < n-1 && nums[r+1] - nums[i] <= k){
                r++;
            }

            int t = r - l + 1;
            res = max(res, min( t - mp[nums[i]], o) + mp[nums[i]]);
        }

        l = 0;

        for ( r = 0;  r < n; r++){
            int mid = (nums[l] + nums[r])/2;

            while( mid - nums[l] > k || nums[r] - mid > k){
                l++;

                 mid = (nums[l] + nums[r])/2;
            }

            res = max( res, min(r - l + 1,o));
        }

        return res;


        
    }
};