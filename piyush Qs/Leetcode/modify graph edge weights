class Solution {
public:
    
    long long dist[107][107];

    void floydWarshall(int n) {
        for (int k = 0; k < n; ++k) {
            for (int i = 0; i < n; ++i) {
                for (int j = 0; j < n; ++j) {
                    if (dist[i][j] > dist[i][k] + dist[k][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                    }
                }
            }
        }
    }
    
    void updateDistances(int u, int v, int weight, int n) {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                dist[i][j] = min({dist[i][j], dist[i][u] + weight + dist[v][j], dist[i][v] + weight + dist[u][j]});
            }
        }
    }
    
    vector<vector<int>> modifiedGraphEdges(int n, vector<vector<int>>& edges, int source, int destination, int target) {
        for (int i = 0; i < n; ++i) {
            fill(dist[i], dist[i] + n, 1e12);
            dist[i][i] = 0;
        }
        
        vector<int> missingWeights;
        for (int i = 0; i < edges.size(); ++i) {
            int u = edges[i][0], v = edges[i][1], w = edges[i][2];
            if (w != -1) {
                dist[u][v] = dist[v][u] = w;   
            } else {
                missingWeights.push_back(i);
            }
        }
        
        floydWarshall(n);
        
        if (dist[source][destination] < target) return {};
        
        for (int idx : missingWeights) {
            if (dist[source][destination] == target) {
                edges[idx][2] = 2e9;
                continue;
            }
            int u = edges[idx][0], v = edges[idx][1];
        
            long long newPath1 = dist[source][u] + 1 + dist[v][destination];
            long long newPath2 = dist[source][v] + 1 + dist[u][destination];
            
            long long minPath = min(newPath1, newPath2);
            if (minPath > target) {
                updateDistances(u, v, 1, n);
                edges[idx][2] = 1;
            } else {
                int neededWeight = 1 + (target - minPath);
                updateDistances(u, v, neededWeight, n);
                edges[idx][2] = neededWeight;
            }
        }
        
        if (dist[source][destination] != target) return {};
        return edges;
    }
};
