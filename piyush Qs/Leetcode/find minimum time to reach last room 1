class Solution {
public:
    int minTimeToReach(vector<vector<int>>& mvt) {
        
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;

        pq.push({0,{0,0}});

        int n = mvt.size();

        int m = mvt[0].size();

        vector<vector<int>>dp( n, vector<int>(m, INT_MAX));

        int dx[] = {-1,1,0,0};
        int dy[] = {0,0,-1,1};

        dp[0][0] = 0;

        while( !pq.empty()){

            auto it = pq.top();
            pq.pop();

            int x = it.second.first;
            int y = it.second.second;

            int d = it.first;

            if ( x == n-1 && y == m-1)  return d;

            for ( int i = 0; i < 4; i++){
                int nx = x + dx[i];
                int ny = y + dy[i];

                if ( nx < 0 || ny < 0 || nx >= n || ny >= m)

                continue;

                int curr = 1 + max( d, mvt[nx][ny]);

                if ( curr < dp[nx][ny]){
                    dp[nx][ny] = curr;

                    pq.push({curr, {nx,ny}});
                }
            }
        }

        return dp[n-1][m-1];


    }
};